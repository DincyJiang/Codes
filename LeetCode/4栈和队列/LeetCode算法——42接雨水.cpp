/*
给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水).
示例:
输入: [0,1,0,2,1,0,1,3,2,1,2,1]
输出: 6
*/

#include <vector>
#include <stack>
using namespace std;

// 栈的解法
// 遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，
// 注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。
// 当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。
// 此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过，
// 如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，
// 只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量啦

// 注意！！！ 一次只算一层的坑
class Solution {
public:
    int trap(vector<int>& height) {
        stack<int> st;
        int i = 0, res = 0, n = height.size();
        while (i < n) {
            if (st.empty() || height[i] <= height[st.top()])
                st.push(i++);
            else {
                int t = st.top();
                st.pop();
                if (st.empty()) // 如果栈中只有一个元素，就形成不了坑
                    continue;
                // 坑高 * 坑宽
                res += (min(height[i], height[st.top()]) - height[t]) * (i - st.top() - 1);
            }
        }
        return res;
    }
};